@startuml inventory_mvp.puml

skinparam classAttributeIconSize 0

abstract class BaseEntity {
  - id: UUID
  - isActive: boolean
  - createdAt: Date
  - createdBy: User 
  - updatedAt: Date
  - updatedBy: User
  + create()
  + read()
  + update()
  + deactivate()
}

class TenantEntity extends BaseEntity {
  - id: UUID
  - name: string
  - members: User[]
  - owner: User
  + inviteMember(user: User)
  + removeMember(user: User)
  + listMembers(): User[]
  + hasData(): boolean
  + transferOwnership()
}

class User {
  - id: UUID
  - isActive: boolean
  - createdAt: Date
  - updatedAt: Date
  - lastLoginAt: Date
  - timeZone: string
  - superUser: boolean
  - firstName: string
  - lastName: string
  - email: string
  - password: string
  - refreshToken: string
  + createTenant()
  + changePassword()
  + forgotPassword()
  + authenticate()
  + fullName(): string
}

class Transaction extends BaseEntity {
  - tenant: TenantEntity
  - type: "income" | "expense"
  - name: string
  - category: Category
  - status: "paid" | "unpaid" | "pending" | "canceled"
  - amount: number
  - expirationDate: Date
  - cancelReason: string
  - paymentMethod: "pix" | "cash" | "debit" | "credit"
  - paymentByCredit: PaymentByCredit
  - goal: Goal
  + checkCategory()
  + assignToGoal(goal: Goal)
  + cancelTransaction(reason: string)
  + isExpired(): boolean
  + handleCreditPayment()
}

class PaymentByCredit extends BaseEntity {
  - tenant: TenantEntity
  - transaction: Transaction
  - creditCard: CreditCard
  - parcelQuantity: number
  - parcelAmount: number
  - firstParcel: Date
}

class Category extends BaseEntity {
  - tenant: TenantEntity
  - name: string
  - maxAmount: number
  - startDate: Date
  - endDate: Date
  + linkedTransactions(): Transaction[]
  + isWithinLimit(amount: number): boolean
}

class Goal extends BaseEntity {
  - tenant: TenantEntity
  - name: string
  - amountRaised: number
  - goalAmount: number
  - description: string
  - image: string
  - goalDate: Date
  + createGoalCategory()
  + calculateAmountRaised()
  + remainingAmount(): number
  + isAchieved(): boolean
}

class CreditCard extends BaseEntity {
  - tenant: TenantEntity
  - name: string
  - brand: string
  - closingDay: number
  - dueDay: number
  - limit: number
  - currentBalance: number
  + payBill(amount: number)
  + addTransaction(transaction: Transaction)
  + getAvailableLimit(): number
  + getInvoice(month: Date): Transaction[]
  + closeInvoice(month: Date): void
}

class WishList extends BaseEntity {
  - tenant: TenantEntity
  - name: string
  - description: string
  - expectedAmount: number
  - isPurchased: boolean
  + handlePurchased()
}

User "1" -- "*" TenantEntity : owner
User "1" -- "*" TenantEntity : member
TenantEntity "1" -- "*" Transaction
TenantEntity "1" -- "*" Category
TenantEntity "1" -- "*" Goal
TenantEntity "1" -- "*" Wishlist
TenantEntity "1" -- "*" CreditCard
Transaction "1" -- "0..1" CreditCard
Transaction "*" -- "1" Category

@enduml
